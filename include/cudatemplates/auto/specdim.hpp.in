/*
  NOTE: THIS FILE HAS BEEN CREATED AUTOMATICALLY,
  ANY CHANGES WILL BE OVERWRITTEN WITHOUT NOTICE!
*/

/* 
  Cuda Templates.

  Copyright (C) 2008 Institute for Computer Graphics and Vision,
                     Graz University of Technology
  
  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 3 of the License, or
  (at your option) any later version.
  
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
  
  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#ifndef CUDA_@NAME@@Dim@D_H
#define CUDA_@NAME@@Dim@D_H


#include <cudatemplates/@name@.hpp>


namespace Cuda {

/**
   @Name@ template specialized for @Dim@ dimension(s).
*/
template <class Type>
class @Name@@Dim@D:
    virtual public Layout<Type, @Dim@>,
    @Pointer@virtual public Pointer<Type, @Dim@>,
    public @Name@<Type, @Dim@>
{
public:
#ifndef CUDA_NO_DEFAULT_CONSTRUCTORS
  /**
     Default constructor.
  */
  inline @Name@@Dim@D()
  {
  }
#endif

  /**
     Constructor.
     @param _size requested size of memory block.
  */
  inline @Name@@Dim@D(const Size<@Dim@> &_size):
    Layout<Type, @Dim@>(_size),
    @Pointer@Pointer<Type, @Dim@>(_size),
    @Name@<Type, @Dim@>(_size)
  {
  }

  /**
     Constructor.
     @param layout requested layout of memory block.
  */
  inline @Name@@Dim@D(const Layout<Type, @Dim@> &layout):
    Layout<Type, @Dim@>(layout),
    @Pointer@Pointer<Type, @Dim@>(layout),
    @Name@<Type, @Dim@>(layout)
  {
  }

  /**
     Constructor.
  */
  inline @Name@@Dim@D(@SizeArgDecl@):
    Layout<Type, @Dim@>(Size<@Dim@>(@SizeArgs@)),
    @Pointer@Pointer<Type, @Dim@>(Size<@Dim@>(@SizeArgs@)),
    @Name@<Type, @Dim@>(Size<@Dim@>(@SizeArgs@))
  {
  }

  /**
     Copy constructor.
     @param x instance of @Name@@Dim@D to be copied
  */
  inline @Name@@Dim@D(const @Name@@Dim@D<Type> &x):
    Layout<Type, @Dim@>(x),
    @Pointer@Pointer<Type, @Dim@>(x),
    @Name@<Type, @Dim@>(x)
  {
  }

  /**
     Constructor.
     Initialization from different type.
     @param x instance of different type to be copied
  */
  template<class Name>
    inline @Name@@Dim@D(const Name &x):
    Layout<Type, @Dim@>(x),
    @Pointer@Pointer<Type, @Dim@>(x),
    @Name@<Type, @Dim@>(x)
  {
  }

  /**
     Constructor.
     Initialization of region from same or different type.
     @param x instance to be copied
     @param ofs offset of region
     @param size size of region
  */
  template<class Name>
    inline @Name@@Dim@D(const Name &x, const Size<@Dim@> &ofs, const Size<@Dim@> &size):
    Layout<Type, @Dim@>(size),
    @Pointer@Pointer<Type, @Dim@>(size),
    @Name@<Type, @Dim@>(x, ofs, size)
  {
  }

  /**
     Constructor.
     Initialization of region from same or different type.
     @param x instance to be copied
     @param @OfsArgs@ offset of region
     @param @SizeArgs@ size of region
  */
  template<class Name>
    inline @Name@@Dim@D(const Name &x, @OfsArgDecl@, @SizeArgDecl@):
    Layout<Type, @Dim@>(Size<@Dim@>(@SizeArgs@)),
    @Pointer@Pointer<Type, @Dim@>(Size<@Dim@>(@SizeArgs@)),
    @Name@<Type, @Dim@>(x, Size<@Dim@>(@OfsArgs@), Size<@Dim@>(@SizeArgs@))
  {
  }
};

}  // namespace Cuda


#endif
